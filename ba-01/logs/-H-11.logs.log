do run
loading script "helix_air.py"
loading script "helix_pump_ms.py"
loading script "helix_air.py"
loading script "helix_pump_prep.py"
testing...
no interpolation path defined
executed snippet estimated_duration=297.28, duration=0.000249862670898
script duration name:air seconds:297.0
loading script "helix_air.py"
loading script "helix_pump_ms.py"
loading script "helix_air.py"
loading script "helix_pump_prep.py"
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=2.50339508057e-05
air in script context. using previous estimated duration
script duration name:air seconds:297.0
loading script "helix_air.py"
loading script "helix_pump_ms.py"
loading script "helix_air.py"
loading script "helix_pump_prep.py"
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=8.89301300049e-05
Script duration 594.0
Run total estimated duration= 595.000
run duration: 0:09:55
doing event level: 2
----------------- start -----------------
**************** Experiment Type: Ar/Ar, Ar/Ar
close session 4947705200
$$$$$ Clearing conditionals
adding conditionals 
Add queue conditionals
add default conditionals
adding default conditionals from /Users/labuser/Pychron/setupfiles/spectrometer/default_conditionals.yaml
Start automated run ba-01-H-11
loading script "helix_air.py"
loading script "helix_pump_ms.py"
loading script "helix_air.py"
loading script "helix_pump_prep.py"
%%%%%%%%%%%%%%%%%% setting automated run ba-01-H-11
No value "sensitivity_multiplier" in metadata
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
============================= Pre Extraction Check =============================
loading queue conditionals pre_run_terminations
loading system conditionals pre_run_terminations
loading conditionals from /Users/labuser/Pychron/setupfiles/spectrometer/default_conditionals.yaml
12:01:07 -- ******* Pre Extraction Check *******
Get a measurement from the spectrometer
Pre Extraction Termination data. keys=L2(CDD),H2,H1,AX,L1, signals=-0.00001,-0.01650,-0.26088,0.14656,-0.01414
12:01:07 -- testing system defined conditionals
Checking default pre extraction terminations n=1
testing L2_CDD_
evaluate ot="L2(CDD).inactive" t="L2_CDD_", ctx="{'L2_CDD_': False}"
12:01:07 -- ******* Pre Extraction Check Passed *******
=================================================================================
start extraction
do extraction
Analysis started at 12:01:07.088663
Extraction Started helix_air.py
12:01:07 -- ******* Extraction Started helix_air.py *******
state changed from not run to extraction
DO EXTRACTION <pychron.extraction_line.pyscript_runner.PyScriptRunner object at 0x12808aef0>
testing...
no interpolation path defined
executed snippet estimated_duration=68.0, duration=0.000324964523315
Air pipette
open ('3',) {}
open name=3 desc=---
check software interlocks 3
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
ROUT:OPEN (@103)
change switch state (True, True)
update switch state 3 True args=() kw={} ncanvase=2
12:01:07 -- OPEN   VALVE-3 (SecondToIP)
-------------------------- open 3 () result=[(True, True)]
action=open, ok=True, locked=[False]
close ('2',) {}
close name=2 desc=---
check software interlocks 2
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
ROUT:CLOSE (@102)
change switch state (True, True)
update switch state 2 False args=() kw={} ncanvase=2
12:01:07 -- CLOSE  VALVE-2 (ExtrToMS)
-------------------------- close 2 () result=[(True, True)]
action=close, ok=True, locked=[False]
open ('1',) {}
open name=1 desc=---
check software interlocks 1
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open Valve Ion Pump Set ===>> OK
change switch state (True, True)
update switch state 1 True args=() kw={} ncanvase=2
12:01:07 -- OPEN   VALVE-1 (MSIonPump)
-------------------------- open 1 () result=[(True, True)]
action=open, ok=True, locked=[False]
close ('8',) {}
close name=8 desc=---
check software interlocks 8
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
ROUT:CLOSE (@108)
change switch state (True, True)
update switch state 8 False args=() kw={} ncanvase=2
12:01:08 -- CLOSE  VALVE-8 (Sample1toFirst)
-------------------------- close 8 () result=[(True, True)]
action=close, ok=True, locked=[False]
close ('9',) {}
close name=9 desc=---
check software interlocks 9
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
ROUT:CLOSE (@109)
change switch state (True, True)
update switch state 9 False args=() kw={} ncanvase=2
12:01:08 -- CLOSE  VALVE-9 (Sample2toFirst)
-------------------------- close 9 () result=[(True, True)]
action=close, ok=True, locked=[False]
close ('7',) {}
close name=7 desc=---
check software interlocks 7
interlocks ['6']
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
ROUT:CLOSE (@107)
change switch state (True, True)
update switch state 7 False args=() kw={} ncanvase=2
12:01:08 -- CLOSE  VALVE-7 (APInner)
-------------------------- close 7 () result=[(True, True)]
action=close, ok=True, locked=[False]
open ('5',) {}
open name=5 desc=---
check software interlocks 5
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
ROUT:OPEN (@105)
change switch state (True, True)
update switch state 5 True args=() kw={} ncanvase=2
12:01:08 -- OPEN   VALVE-5 (FirstToTurbo)
-------------------------- open 5 () result=[(True, True)]
action=open, ok=True, locked=[False]
open ('11',) {}
open name=11 desc=---
check software interlocks 11
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
ROUT:OPEN (@111)
change switch state (True, True)
update switch state 11 True args=() kw={} ncanvase=2
12:01:09 -- OPEN   VALVE-11 (APSafety)
-------------------------- open 11 () result=[(True, True)]
action=open, ok=True, locked=[False]
open ('6',) {}
open name=6 desc=---
check software interlocks 6
interlocks ['7']
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
ROUT:OPEN (@106)
change switch state (True, True)
update switch state 6 True args=() kw={} ncanvase=2
12:01:09 -- OPEN   VALVE-6 (APOuter)
-------------------------- open 6 () result=[(True, True)]
action=open, ok=True, locked=[False]
sleep (15,) {}
SLEEP 15.0
block started
WaitControl setup for 15.0  
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('1', True, False)
update switch state 1 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('6', True, False)
update switch state 6 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('1', True, False)
update switch state 1 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('6', True, False)
update switch state 6 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
Join finished
block finished. duration 15.0566401482
close ('6',) {}
close name=6 desc=---
check software interlocks 6
interlocks ['7']
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
ROUT:CLOSE (@106)
change switch state (True, True)
update switch state 6 False args=() kw={} ncanvase=2
12:01:24 -- CLOSE  VALVE-6 (APOuter)
-------------------------- close 6 () result=[(True, True)]
action=close, ok=True, locked=[False]
sleep (2,) {}
SLEEP 2.0
block started
WaitControl setup for 2.0  
Join finished
block finished. duration 2.02463006973
Blank. Not filling pipette
sleep (15,) {}
SLEEP 15.0
block started
WaitControl setup for 15.0  
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('1', True, False)
update switch state 1 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
Join finished
block finished. duration 15.0560770035
close ('7',) {}
close name=7 desc=---
check software interlocks 7
interlocks ['6']
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
ROUT:CLOSE (@107)
change switch state (True, True)
update switch state 7 False args=() kw={} ncanvase=2
12:01:42 -- CLOSE  VALVE-7 (APInner)
-------------------------- close 7 () result=[(True, True)]
action=close, ok=True, locked=[False]
close ('5',) {}
close name=5 desc=---
check software interlocks 5
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
ROUT:CLOSE (@105)
change switch state (True, True)
update switch state 5 False args=() kw={} ncanvase=2
12:01:42 -- CLOSE  VALVE-5 (FirstToTurbo)
-------------------------- close 5 () result=[(True, True)]
action=close, ok=True, locked=[False]
close ('3',) {}
close name=3 desc=---
check software interlocks 3
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
ROUT:CLOSE (@103)
change switch state (True, True)
update switch state 3 False args=() kw={} ncanvase=2
12:01:42 -- CLOSE  VALVE-3 (SecondToIP)
-------------------------- close 3 () result=[(True, True)]
action=close, ok=True, locked=[False]
sleep (2,) {}
SLEEP 2.0
block started
WaitControl setup for 2.0  
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('1', True, False)
update switch state 1 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('3', False, False)
update switch state 3 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('5', False, False)
update switch state 5 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
Join finished
block finished. duration 2.02266716957
open ('4',) {}
open name=4 desc=---
check software interlocks 4
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
ROUT:OPEN (@104)
change switch state (True, True)
update switch state 4 True args=() kw={} ncanvase=2
12:01:45 -- OPEN   VALVE-4 (FirstToSecondStage)
-------------------------- open 4 () result=[(True, True)]
action=open, ok=True, locked=[False]
open ('6',) {}
open name=6 desc=---
check software interlocks 6
interlocks ['7']
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
ROUT:OPEN (@106)
change switch state (True, True)
update switch state 6 True args=() kw={} ncanvase=2
12:01:45 -- OPEN   VALVE-6 (APOuter)
-------------------------- open 6 () result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=102.0, duration=38.5277187824
helix_air.py completed successfully
no extraction action
Requested Output= 0.000
Achieved Output=  0.000
no extraction action
no extraction action
no extraction action
no extraction action
persistence save...
persistence save - db
AutomatedRunPersister post_extraction_save deprecated
persistence save - dvc
no extraction position for 
Extraction Finished
12:01:45 -- ******* Extraction Finished *******
no overlap. not waiting for min ms pumptime
start measurement
do measurement
L#=ba-01-H analysis type=blank_air
Measurement Started helix_air.py
12:01:45 -- ******* Measurement Started helix_air.py *******
state changed from extraction to measurement
setting spec, defl, and gains
GetExtractionLens ===>> 53.17
GetYSymmetry ===>> 21.3198412698413
GetZSymmetry ===>> 0
GetZFocus ===>> 0
GetDeflection L2(CDD) ===>> Error: Invalid Command
Failed reading L2(CDD) deflection. Error=could not convert string to float: Error: Invalid Command. Using previous value 0
GetGain H2 ===>> 0.986801698763664
GetGain H1 ===>> 1.00965220605837
GetGain AX ===>> 1.0074395083375
GetGain L1 ===>> 1.00823694673985
GetGain L2(CDD) ===>> 0
pre measurement save
New frame /Users/labuser/Pychron/data/isotopes/1e/5daac8-354e-4ef6-bd8c-5b8754fdc303.h5
flush and close file /Users/labuser/Pychron/data/isotopes/1e/5daac8-354e-4ef6-bd8c-5b8754fdc303.h5
testing...
no interpolation path defined
executed snippet estimated_duration=297.28, duration=0.000257968902588
activate_detectors ('H2', 'H1', 'AX', 'L1', 'L2(CDD)') {}
activate detectors
*************** Set Analysis View Ar/Ar
create graphs
clearing graphs
clear isotope group
setting isotope det=H2, iso=Ar40
setting isotope det=H1, iso=Ar39
setting isotope det=AX, iso=Ar38
setting isotope det=L1, iso=Ar37
setting isotope det=L2(CDD), iso=Ar35
load analysis view
position_magnet ('Ar40',) {'detector': 'H2'}
detector Detector(H2)
POSITION Ar40 H2
setting detector H2 to Ar40 (39.962)
setting detector H1 to Ar39 (38.962)
setting detector AX to Ar38 (37.962)
setting detector L1 to Ar37 (36.962)
setting detector L2(CDD) to Ar36 (35.962)
Mapping mass to dac mass func: "parabolic"
H2 map mass coeffs = [  2.53589168e-02  -1.84786063e+00   3.71389543e+01]
H2 map mass to dac 39.962 >> 3.79196
GetHighVoltage ===>> 9900
positioning Ar40 (3.79196) on H2
setting magnet DAC
current  : 3.790268
requested: 3.791960
Delta Dac: 0.001692
SetMagnetDAC 3.79196 ===>> OK
Magnet settling time: 0.500
Magnet settling complete
set_dac. change=True
update labels <pychron.experiment.plot_panel.PlotPanel object at 0x127dcacb0>
update labels "<pychron.graph.stacked_regression_graph.StackedRegressionGraph object at 0x1292703b0>"
setting label 0 H2 Ar40
setting label 1 H1 Ar39
setting label 2 AX Ar38
setting label 3 L1 Ar37
setting label 4 L2(CDD) Ar36
update labels "<pychron.graph.stacked_graph.StackedGraph object at 0x124e19ad0>"
setting label 0 H2 Ar40
setting label 1 H1 Ar39
setting label 2 AX Ar38
setting label 3 L1 Ar37
setting label 4 L2(CDD) Ar36
equilibrate () {'inlet': '2', 'outlet': '1', 'eqtime': 40}
Equilibration Started
12:01:47 -- ******* Equilibration Started *******
check software interlocks 1
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close Valve Ion Pump Set ===>> OK
change switch state (True, True)
update switch state 1 False args=() kw={} ncanvase=2
12:01:47 -- CLOSE  VALVE-1 (MSIonPump)
waiting 3s before opening inlet value ('2',)
check software interlocks 2
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
ROUT:OPEN (@102)
change switch state (True, True)
update switch state 2 True args=() kw={} ncanvase=2
12:01:50 -- OPEN   VALVE-2 (ExtrToMS)
set_time_zero () {}
equilibrating for 40sec
sniff (40,) {}
py_sniff
build tables- sniff [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2(CDD))]
add group /sniff/Ar40 (Group) '' table H2
add group /sniff/Ar39 (Group) '' table H1
add group /sniff/Ar38 (Group) '' table AX
add group /sniff/Ar37 (Group) '' table L1
add group /sniff/Ar36 (Group) '' table L2(CDD)
flush and close file /Users/labuser/Pychron/data/isotopes/1e/5daac8-354e-4ef6-bd8c-5b8754fdc303.h5
measuring sniff. ncounts=40
"sniff" increment series count="1" fit count="0" regressing="False"
starting measurement
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('3', False, False)
update switch state 3 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('2', True, False)
update switch state 2 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('5', False, False)
update switch state 5 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('4', True, False)
update switch state 4 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('6', True, False)
update switch state 6 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('3', False, False)
update switch state 3 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('2', True, False)
update switch state 2 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('5', False, False)
update switch state 5 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('4', True, False)
update switch state 4 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('6', True, False)
update switch state 6 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('3', False, False)
update switch state 3 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('2', True, False)
update switch state 2 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('5', False, False)
update switch state 5 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('4', True, False)
update switch state 4 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('6', True, False)
update switch state 6 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
12:02:15 -- collecting point 25
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('3', False, False)
update switch state 3 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('2', True, False)
update switch state 2 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('5', False, False)
update switch state 5 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('4', True, False)
update switch state 4 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('6', True, False)
update switch state 6 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
Equilibration Finished
12:02:30 -- ******* Equilibration Finished *******
check software interlocks 2
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
ROUT:CLOSE (@102)
change switch state (True, True)
update switch state 2 False args=() kw={} ncanvase=2
12:02:30 -- CLOSE  VALVE-2 (ExtrToMS)
Post Equilibration Started helix_pump_prep.py
12:02:30 -- ******* Post Equilibration Started helix_pump_prep.py *******
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000125885009766
close ('6',) {}
close name=6 desc=---
check software interlocks 6
interlocks ['7']
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
ROUT:CLOSE (@106)
change switch state (True, True)
update switch state 6 False args=() kw={} ncanvase=2
12:02:30 -- CLOSE  VALVE-6 (APOuter)
-------------------------- close 6 () result=[(True, True)]
action=close, ok=True, locked=[False]
close ('4',) {}
close name=4 desc=---
check software interlocks 4
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
ROUT:CLOSE (@104)
change switch state (True, True)
update switch state 4 False args=() kw={} ncanvase=2
12:02:31 -- CLOSE  VALVE-4 (FirstToSecondStage)
-------------------------- close 4 () result=[(True, True)]
waiting for write to finish
measurement finished
estimated time: 40.000 actual time: :40.193
flush and close file /Users/labuser/Pychron/data/isotopes/1e/5daac8-354e-4ef6-bd8c-5b8754fdc303.h5
set_fits () {}
using default fits file=/Users/labuser/Pychron/scripts/measurement/fits/nominal.yaml
set "Ar40" to "('Linear', 'SEM')"
set "Ar36" to "('Linear', 'SEM')"
set "Ar37" to "('Linear', 'SEM')"
set "Ar38" to "('Linear', 'SEM')"
set "Ar39" to "('Linear', 'SEM')"
set_baseline_fits () {}
using default fits file=/Users/labuser/Pychron/scripts/measurement/fits/nominal.yaml
set "H2" to "('Average', 'SEM')"
set "L2(CDD)" to "('Average', 'SEM')"
set "L1" to "('Average', 'SEM')"
set "AX" to "('Average', 'SEM')"
set "H1" to "('Average', 'SEM')"
multicollect () {'ncounts': 120}
build tables- signal [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2(CDD))]
add group /signal/Ar40 (Group) '' table H2
add group /signal/Ar39 (Group) '' table H1
add group /signal/Ar38 (Group) '' table AX
add group /signal/Ar37 (Group) '' table L1
add group /signal/Ar36 (Group) '' table L2(CDD)
flush and close file /Users/labuser/Pychron/data/isotopes/1e/5daac8-354e-4ef6-bd8c-5b8754fdc303.h5
measuring signal. ncounts=120
action=close, ok=True, locked=[False]
sleep (2,) {}
SLEEP 2.0
block started
WaitControl setup for 2.0  
"signal" increment series count="2" fit count="1" regressing="True"
starting measurement
Join finished
block finished. duration 2.07755804062
open ('3',) {}
open name=3 desc=---
check software interlocks 3
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
ROUT:OPEN (@103)
change switch state (True, True)
update switch state 3 True args=() kw={} ncanvase=2
12:02:33 -- OPEN   VALVE-3 (SecondToIP)
-------------------------- open 3 () result=[(True, True)]
action=open, ok=True, locked=[False]
open ('11',) {}
open name=11 desc=---
check software interlocks 11
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
ROUT:OPEN (@111)
change switch state (True, True)
update switch state 11 True args=() kw={} ncanvase=2
12:02:33 -- OPEN   VALVE-11 (APSafety)
-------------------------- open 11 () result=[(True, True)]
action=open, ok=True, locked=[False]
open ('5',) {}
open name=5 desc=---
check software interlocks 5
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
ROUT:OPEN (@105)
change switch state (True, True)
update switch state 5 True args=() kw={} ncanvase=2
12:02:34 -- OPEN   VALVE-5 (FirstToTurbo)
-------------------------- open 5 () result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=6.0, duration=3.53165507317
helix_pump_prep.py completed successfully
Post Equilibration Finished
12:02:34 -- ******* Post Equilibration Finished *******
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
12:02:56 -- collecting point 25
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
12:03:21 -- collecting point 50
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
12:03:46 -- collecting point 75
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
12:04:11 -- collecting point 100
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
waiting for write to finish
measurement finished
estimated time: 120.000 actual time: :120.640
flush and close file /Users/labuser/Pychron/data/isotopes/1e/5daac8-354e-4ef6-bd8c-5b8754fdc303.h5
baselines () {'detector': 'H2', 'mass': 39.59, 'ncounts': 60}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Baseline
build tables- baseline [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2(CDD))]
add group baseline table H2
add group baseline table H1
add group baseline table AX
add group baseline table L1
add group baseline table L2(CDD)
flush and close file /Users/labuser/Pychron/data/isotopes/1e/5daac8-354e-4ef6-bd8c-5b8754fdc303.h5
detector Detector(H2)
POSITION 39.59 H2
Mapping mass to dac mass func: "parabolic"
H2 map mass coeffs = [  2.53589168e-02  -1.84786063e+00   3.71389543e+01]
H2 map mass to dac 39.59 >> 3.7289090071
GetHighVoltage ===>> 9900
positioning 39.59 (3.7289090071) on H2
setting magnet DAC
current  : 3.791960
requested: 3.728909
Delta Dac: 0.063051
SetMagnetDAC 3.7289090071 ===>> OK
Magnet settling time: 0.500
Magnet settling complete
set_dac. change=True
Delaying 4s for detectors to settle
Join finished
measuring baseline. ncounts=60
"baseline" increment series count="2" fit count="1" regressing="True"
starting measurement
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
12:05:01 -- collecting point 25
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
12:05:26 -- collecting point 50
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('1', False, False)
update switch state 1 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
waiting for write to finish
measurement finished
estimated time: 60.000 actual time: :60.277
flush and close file /Users/labuser/Pychron/data/isotopes/1e/5daac8-354e-4ef6-bd8c-5b8754fdc303.h5
peak_center () {'detector': 'H2', 'isotope': 'Ar40'}
peak center: mean=0.563978177765 threshold=3
Skipping peak center. intensities to small. 0.563978177765<3
executed snippet estimated_duration=297.28, duration=232.278059006
helix_air.py completed successfully
Measurement Finished
12:05:37 -- ******* Measurement Finished *******
Post Measurement Started helix_pump_ms.py
12:05:37 -- ******* Post Measurement Started helix_pump_ms.py *******
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=2.50339508057e-05
open ('1',) {}
open name=1 desc=---
check software interlocks 1
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open Valve Ion Pump Set ===>> OK
change switch state (True, True)
update switch state 1 True args=() kw={} ncanvase=2
12:05:37 -- OPEN   VALVE-1 (MSIonPump)
-------------------------- open 1 () result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=0, duration=0.274265050888
helix_pump_ms.py completed successfully
setting _ms_pumptime
Post Measurement Finished
12:05:38 -- ******* Post Measurement Finished *******
$$$$$$$$$$$$$$$$$$$$ state at run end measurement
state changed from measurement to success
post measurement save measured=True aborted=False
Set filtering
setting fod for Ar40= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for H2= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar36= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for L2(CDD)= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar37= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for L1= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar38= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for AX= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar39= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for H1= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
persistence save...
persistence save - db
post measurement save
5163966544 connecting to database sqlite:////Users/labuser/Pychron/.appdata/local_lab.db
connected to db sqlite:////Users/labuser/Pychron/.appdata/local_lab.db
create new session 5163966544
close session 5163966544
No database instance. Not saving post measurement to isotopedb database
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
persistence save - dvc
================= post measurement started
create new session 4931926448
close session 4931926448
add to repo msg=modified - helix_air.py
add to repo msg=modified - helix_air.py
add to repo msg=modified - helix_pump_ms.py
add to repo msg=modified - helix_pump_prep.py
---------------- Experiment Queue saving disabled
DVC saving peakcenter
Smart pull ahead: 0 behind: 0
Up-to-date with origin
add to repo msg=modified - 89bc375cd845c070619816cb57227db1a8e33785.json
add to repo msg=modified - -H-11.json
add to repo msg=modified - -H-11.dat.json
add to repo msg=modified - -H-11.blan.json
add to repo msg=modified - -H-11.inte.json
add to repo msg=modified - -H-11.icfa.json
add to repo msg=modified - -H-11.base.json
not at valid file /Users/labuser/Pychron/data/.dvc/repositories/Helix_air170/ba-01/tags/-H-11.tags.json
add to repo msg=modified - -H-11.peak.json
add to repo msg=modified - -H-11.extr.json
not at valid file /Users/labuser/Pychron/data/.dvc/repositories/Helix_air170/ba-01/monitor/-H-11.moni.json
commit message=<COLLECTION>
add to repo msg=modified - -H-11.inte.json
add to repo msg=modified - -H-11.base.json
commit message=<ISOEVO> default collection fits
add to repo msg=modified - -H-11.blan.json
commit message=<BLANKS> preceding 
add to repo msg=modified - -H-11.icfa.json
commit message=<ICFactor> default
push repository <pychron.git_archive.repo_manager.GitRepoManager object at 0x12d412b90>
pushing to remote=origin, url=https://github.com
load indicator states
Switch indicator state True, Open
handle state ('11', True, False)
update switch state 11 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('10', True, False)
update switch state 10 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('1', True, False)
update switch state 1 True args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('3', True, False)
update switch state 3 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('2', False, False)
update switch state 2 False args=(False,) kw={} ncanvase=2
Switch indicator state True, Open
handle state ('5', True, False)
update switch state 5 True args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('4', False, False)
update switch state 4 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('7', False, False)
update switch state 7 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('6', False, False)
update switch state 6 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('9', False, False)
update switch state 9 False args=(False,) kw={} ncanvase=2
Switch indicator state False, Closed
handle state ('8', False, False)
update switch state 8 False args=(False,) kw={} ncanvase=2
Smart pull ahead: 0 behind: 0
Up-to-date with origin
no changes to meta repo
create new session 4931926448
add association Helix_air170
get identifier "ba-01-H"
setting analysis irradiation position=<pychron.dvc.dvc_orm.IrradiationPositionTbl object at 0x1301ea190>
close session 4931926448
================= post measurement finished
12:05:44 -- ******* Post Run Check *******
loading queue conditionals post_run_actions
loading system conditionals post_run_actions
loading conditionals from /Users/labuser/Pychron/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals post_run_terminations
loading system conditionals post_run_terminations
loading conditionals from /Users/labuser/Pychron/setupfiles/spectrometer/default_conditionals.yaml
12:05:44 -- ******* Post Run Check Passed *******
12:05:44 -- Automated run ba-01-H-11 success duration: 277.971 s
----------------- finish -----------------
----------------- stop -----------------
retroactive repository identifiers disabled
finish run. runs completed=1
update duration runid=ba-01-H-11, duration=277.970679998, md5=060fae79
loading script "helix_air.py"
loading script "helix_pump_ms.py"
loading script "helix_air.py"
loading script "helix_pump_prep.py"
testing...
no interpolation path defined
executed snippet estimated_duration=297.28, duration=0.00031304359436
script duration name:air seconds:297.0
loading script "helix_air.py"
loading script "helix_pump_ms.py"
loading script "helix_air.py"
loading script "helix_pump_prep.py"
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=3.19480895996e-05
air in script context. using previous estimated duration
script duration name:air seconds:297.0
loading script "helix_air.py"
loading script "helix_pump_ms.py"
loading script "helix_air.py"
loading script "helix_pump_prep.py"
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000137090682983
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
pump_ms in script context. using previous estimated duration
script duration name:air seconds:297.0
pump_prep in script context. using previous estimated duration
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
script duration name:air seconds:297.0
script duration name:air seconds:297.0
Script duration 594.0
Run total estimated duration= 595.000
nruns=36 before=5.0, run_dur=21420.0, btw=1050.0
write rem/ex queues
/Users/labuser/Pychron/experiments/rem/Air.rem.txt
/Users/labuser/Pychron/experiments/rem/Air.ex.txt
doing event level: 3
